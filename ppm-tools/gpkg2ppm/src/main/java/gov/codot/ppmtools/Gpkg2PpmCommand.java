/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gov.codot.ppmtools;

import static org.apache.commons.lang3.StringUtils.equalsIgnoreCase;

import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.common.base.Joiner;

import org.geotools.data.DataStoreFinder;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.data.simple.SimpleFeatureSource;
import org.geotools.jdbc.JDBCDataStore;
import org.opengis.feature.Feature;
import org.opengis.feature.GeometryAttribute;
import org.opengis.feature.type.GeometryType;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;



//import static org.apache.commons.beanutils.BeanUtils.describe;


@Command(name = "gpkg2ppm", description = "Converts road features from Open Street Map in Geopackage format to an 'edges' file for the ODE PPM")
public class Gpkg2PpmCommand implements Runnable {

    public static void main(String... args)  throws Exception {
        var exitCode = new CommandLine(new Gpkg2PpmCommand()).execute(args);
        System.exit(exitCode);
     }

    @Parameters(description = "The path to a Geopackage (.gpkg) file created from Open Street Map XML or PBF data via the GDAL ogr2ogr tool.  The gpkg must contain a layer/table named 'lines' with road geometries with standard OSM attributes.")
    private File infile;

    @Option(names = {"-v", "--verbose"},  description = "Print out a lot of details.")
    private boolean verbose;

    @Option(names = {"-o", "--outfile"}, description = "Output file path", defaultValue = "out.edges")
    private File outfile;

    @Option(names = {"-w", "--way-type"}, description = "OSM way types to extract")
    private String[] wayTypes;

    @Option(names = {"-r", "--route"}, description = "Route names to include.  Examples: 'I 25', 'I 25 Express', 'E-470'")
    private String[] routeNames;

    @Override
    public void run() {
        try {
            if (verbose) {
                System.out.println("Command line arguments: ");
                System.out.printf("verbose: %s", verbose);
                System.out.printf("Input file: %s", infile);
                System.out.printf("Output file: %s", outfile);
             }

            if (infile != null && !infile.exists()) {
                System.out.println("File not found: " + infile.toString());
                return;
            } else {
                System.out.println("File found: " + infile.toString());
            }

            
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("dbtype", "geopkg");
            params.put("database", infile.getAbsolutePath());
            //params.put("memory mapped buffer", false);
            
            var store = (JDBCDataStore)DataStoreFinder.getDataStore(params);
            
            
            System.out.printf("%nGeopackage contains the following tables:%n");
            for (String typeName : store.getTypeNames()) {
                System.out.println(typeName);
            }

            if (!Arrays.asList(store.getTypeNames()).stream().anyMatch(typeName -> equalsIgnoreCase(typeName, "lines"))) {
                System.out.println("'lines' table not found in geopackage");
                return;
            }
            store.getFeatureSource("lines");
            SimpleFeatureSource lineSource = store.getFeatureSource("lines");

            

            SimpleFeatureCollection fc = lineSource.getFeatures();
            SimpleFeatureIterator iterator = fc.features();
            if (verbose) {
                while (iterator.hasNext()) {
                    var feature = (Feature)iterator.next();
                    System.out.println("Feature name: " + feature.getName() + " type: " + feature.getType() + " datatype: " + feature.getClass().toString());
                    
                    GeometryAttribute geom = feature.getDefaultGeometryProperty();
                    GeometryType geomType = geom.getType();
                    var crs = geomType.getCoordinateReferenceSystem();
                    System.out.println("CRS: " + crs.getName());

                    var value = geom.getValue();
                    System.out.println("Geom obj type: " + value.getClass());

                    var props = feature.getProperties();
                    for (var prop : props) {
                        if (prop != null) {
                            if (PpmProcessor.OTHER_TAGS.equals(prop.getName().toString())) {
                                System.out.println(String.format("%s===%s", prop.getName(), prop.getValue()));
                            } else {
                                System.out.printf("  [%s == %s]  ", prop.getName(), prop.getValue());
                            }
                        }
                    }
                }
            }

            var ppm = new PpmProcessor(fc);
            
            if (wayTypes != null) {
                System.out.printf("%nFilter by way types: %s %n", Joiner.on(",").join(wayTypes));
                ppm.filterByWayTypes(wayTypes);
            }
        
            if (routeNames != null) {
                System.out.printf("%nFilter by route names: %s %n", Joiner.on(",").join(routeNames));
                ppm.filterByHighwayNames(routeNames);
            }
            
            System.out.printf("%nGrouping line segments by highway name:%n%n");
            
            ppm.sortByHighwayName();
            var fMap = ppm.getHighwayFeatureMap();
            for (var highway : fMap.keySet()) {
                var features = fMap.get(highway);
                System.out.printf("Highway: %s  -  %s segments%n", highway, features.size());
            }

            

            

            System.out.printf("%nMerging highway line segments into longer linear features:%n%n");
            ppm.dissolveHighways();
            var dissolvedMap = ppm.getDissolvedHighwayFeatureMap();
            for (var highwayId : dissolvedMap.keySet()) {
                System.out.printf("Highway line feature: %s%n", highwayId);
            }

            System.out.printf("%nExtracting edges:%n");
            ppm.extractEdges();

            System.out.printf("%nWriting to file: %s%n", outfile);

            ppm.writeMapfile(outfile);
            
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
